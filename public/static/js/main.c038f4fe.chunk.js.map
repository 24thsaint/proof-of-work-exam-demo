{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","name","setName","id","setID","hash","setHash","answer","setAnswer","difficulty","setDifficulty","activeClear","setActiveClear","useEffect","rawN","window","localStorage","getItem","rawID","a","Axios","get","req","data","post","submitName","setItem","className","substring","type","value","onClick","for","date","Date","toUTCString","integrity","sha256","num","x","setInterval","hashRaw","toString","startsWith","clearInterval","document","body","style","alert","response","mine","onChange","e","target","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c038f4fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport sha256 from \"crypto-js/sha256\";\n\nimport \"./App.css\";\n\nconst URL =\n  process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:3333\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [id, setID] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [difficulty, setDifficulty] = useState(\"0x000\");\n  const [activeClear, setActiveClear] = useState(false);\n\n  useEffect(() => {\n    const rawN = window.localStorage.getItem(\"name\");\n    const rawID = window.localStorage.getItem(\"id\");\n\n    if (rawN && rawID) {\n      setName(rawN);\n      setID(rawID);\n    }\n\n    (async () => {\n      const req = await Axios.get(`${URL}/config`);\n      setDifficulty(req.data.difficulty);\n\n      await Axios.post(`${URL}/login`, {\n        name: rawN,\n        id: rawID\n      });\n    })();\n  }, []);\n\n  const submitName = async () => {\n    const req = await Axios.post(`${URL}/login`, {\n      name\n    });\n    window.localStorage.setItem(\"id\", req.data.id);\n    window.localStorage.setItem(\"name\", name);\n    setID(req.data.id);\n  };\n\n  const mine = () => {\n    const date = new Date().toUTCString();\n    const integrity = sha256(date + answer + name + id);\n    let num = 0;\n\n    const x = setInterval(async () => {\n      const hashRaw = \"0x\" + sha256(num + integrity).toString();\n      setHash(hashRaw);\n\n      if (hashRaw.startsWith(difficulty)) {\n        window.clearInterval(x);\n\n        try {\n          const req = await Axios.post(`${URL}/attempt`, {\n            id,\n            hash: hashRaw,\n            answer\n          });\n          document.body.style = `background-color: lime`;\n          alert(\"Congratulations!\");\n        } catch (e) {\n          document.body.style = `background-color: red`;\n          alert(e.response.data.response);\n        }\n        setActiveClear(true);\n      }\n\n      num += 1;\n    }, 1);\n  };\n\n  const clear = () => {\n    document.body.style = `background-color: white`;\n    setActiveClear(false);\n    setHash(\"\")\n  };\n\n  if (id) {\n    return (\n      <div className=\"app\">\n        <div>\n          Welcome, <h2>{name}</h2>\n        </div>\n        <div>\n          Student ID: <h2>{id.substring(2)}</h2>\n        </div>\n        <div>\n          Connected to server with difficulty: <b>{difficulty}</b>\n        </div>\n\n        <hr />\n\n        <div className=\"top-margin\">\n          <input\n            type=\"radio\"\n            id=\"A\"\n            name=\"answer\"\n            value=\"A\"\n            onClick={() => {\n              setAnswer(\"A\");\n            }}\n          />\n          <label for=\"A\">A</label>\n        </div>\n\n        <div className=\"top-margin\">\n          <input\n            type=\"radio\"\n            id=\"B\"\n            name=\"answer\"\n            value=\"B\"\n            onClick={() => {\n              setAnswer(\"B\");\n            }}\n          />\n          <label for=\"B\">B</label>\n        </div>\n\n        <div className=\"top-margin\">\n          <input\n            type=\"radio\"\n            id=\"C\"\n            name=\"answer\"\n            value=\"C\"\n            onClick={() => {\n              setAnswer(\"C\");\n            }}\n          />\n          <label for=\"C\">C</label>\n        </div>\n\n        <div className=\"top-margin\">\n          <input\n            type=\"radio\"\n            id=\"D\"\n            name=\"answer\"\n            value=\"D\"\n            onClick={() => {\n              setAnswer(\"D\");\n            }}\n          />\n          <label for=\"D\">D</label>\n        </div>\n\n        <div className=\"top-margin\">\n          <button\n            onClick={() => {\n              mine();\n            }}\n          >\n            Submit\n          </button>\n        </div>\n        <hr />\n        {hash ? (\n          <div id=\"hash\" className=\"top-margin\">\n            Proof of Work: <h3>{hash}</h3>\n          </div>\n        ) : null}\n        {activeClear ? (\n          <div className=\"top-margin\">\n            <button\n              onClick={() => {\n                clear();\n              }}\n            >\n              Reset\n            </button>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div>\n          <input\n            type=\"text\"\n            onChange={e => {\n              setName(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"top-margin\">\n          <button\n            onClick={() => {\n              submitName();\n            }}\n          >\n            Submit Name\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}